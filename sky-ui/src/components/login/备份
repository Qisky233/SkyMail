<template>
  <div class="loginRegister">
    <transition enter-active-class="animate__animated animate__fadeInUp" appear>
      <el-card class="form-container"
               :class="{
                 'admin-enter-active': isAdminMode,
                 'admin-leave-active': !isAdminMode,
                 'register-mode': isRegisterMode,
                 'login-mode': !isAdminMode && !isRegisterMode
               }">
        <el-button text @click="toggleMode" v-if="!isAdminMode" class="mode-toggle">{{ isRegisterMode ? '已有账号？登录' : '没有账号？注册' }}</el-button>
        <h2>{{ isAdminMode ? '管理员登录' : isRegisterMode ? '注册' : '登录' }}</h2>
        <el-form @submit.prevent="handleSubmit">
          <!-- 管理员登录模式 -->
          <div v-if="isAdminMode">
            <el-form-item>
              <el-input placeholder="用户名" v-model="adminUsername" required />
            </el-form-item>
            <el-form-item>
              <el-input type="password" placeholder="密码" v-model="adminPassword" show-password required />
            </el-form-item>
            <el-form-item>
              <el-button type="primary" native-type="submit" style="width: 100%;">管理员登录</el-button>
            </el-form-item>
            <el-row :gutter="20" class="additional-options">
              <el-col :span="24" style="text-align: left;">
                <el-button text class="additional-option-btn" @click="backToUserLogin">&lt;&lt; 返回</el-button>
              </el-col>
            </el-row>
          </div>
          <!-- 登录/注册模式 -->
          <div v-else>
            <!-- 登录模式 -->
            <div style="display: flex;width: 100%;" v-if="!isRegisterMode">
              <div style="width: 100%;" ref="loginMode">
                <el-form-item>
                  <el-input placeholder="用户名" v-model="username" required />
                </el-form-item>
                <el-form-item>
                  <el-input type="password" placeholder="密码" v-model="password" show-password required />
                </el-form-item>
                <el-row :gutter="20" class="options">
                  <el-col :span="12" style="text-align: left;">
                    <el-checkbox v-model="rememberMe" class="checkbox-label">记住密码</el-checkbox>
                  </el-col>
                  <el-col :span="12" style="text-align: right;">
                    <a href="#" @click.prevent="handleForgetPassword" class="forget-password-link">忘记密码？</a>
                  </el-col>
                </el-row>
              </div>

              <!-- 扫码登录 -->
              <transition name="slide-fade">
                <div v-if="showQRCode" class="qr-placeholder">
                  <div class="qr-mock">
                    <div class="qr-pattern"></div>
                  </div>
                  <p>请使用手机扫描二维码登录</p>
                </div>
              </transition>
            </div>

            <!-- 注册模式 -->
            <div v-else>
              <el-form-item>
                <el-input placeholder="账号" v-model="username" suffix="@ganxy03.cn" disabled-part="@ganxy03.cn" required />
              </el-form-item>
              <el-form-item>
                <el-input type="password" placeholder="密码" v-model="password" show-password required />
              </el-form-item>
              <el-form-item>
                <el-input type="password" placeholder="重复密码" v-model="confirmPassword" show-password required />
              </el-form-item>
              <el-form-item>
                <el-input placeholder="手机号" v-model="phone" required />
              </el-form-item>
              <el-form-item>
                <el-row style="width: 100%;">
                  <el-col :span="16" style="text-align: left;">
                    <el-input placeholder="验证码" v-model="verificationCode" required />
                  </el-col>
                  <el-col :span="8" style="text-align: right;">
                    <el-button type="primary" :disabled="sendingCode" @click.prevent="sendVerificationCode" class="code-send-btn">{{ sendingCode ? `${countdown}s后重发` : '发送验证码' }}</el-button>
                  </el-col>
                </el-row>
              </el-form-item>
            </div>
            <el-form-item>
              <el-button type="primary" native-type="submit" style="width: 100%;">{{ isRegisterMode ? '注册' : '登录' }}</el-button>
            </el-form-item>
            <el-row :gutter="20" class="additional-options">
              <el-col :span="12" style="text-align: left;">
                <el-button text class="additional-option-btn" @click="scanLogin">扫码登录</el-button>
              </el-col>
              <el-col :span="12" style="text-align: right;">
                <el-button text class="additional-option-btn" @click="adminLogin">管理员登录</el-button>
              </el-col>
            </el-row>
          </div>
        </el-form>


      </el-card>
    </transition>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue';

export default {
  // components: {
  //   VueQrcode
  // },
  setup(props, { emit }) {
    const username = ref('');
    const password = ref('');
    const confirmPassword = ref(''); // 新增确认密码字段用于注册模式
    const email = ref('');
    const isRegisterMode = ref(false);
    const rememberMe = ref(false);
    const phone = ref('');
    const verificationCode = ref('');
    const customEmail = ref('');
    const sendingCode = ref(false);
    const countdown = ref(120);

    const isAdminMode = ref(false);
    const adminUsername = ref('');
    const adminPassword = ref('');
    const showQRCode = ref(false);


    const loginMode = ref(null)

    const qrCodePic = ref(null)


    // const hello = ref('https://kimi.moonshot.cn/download/app?ref=chat');
    // const options = ref({
    //   color: {
    //     dark: '#000000',
    //     light: '#ffffff',
    //   },
    //   margin: 0
    // });

    const handleSubmit = () => {
      // console.log('Username:', username.value);
      // console.log('Password:', password.value);
      // if (isRegisterMode.value) {
      //   console.log('Phone:', phone.value);
      //   console.log('Verification Code:', verificationCode.value);
      //   console.log('Email:', `${username.value}@ganxy03.cn`);
      // }
      // emit('submit', {
      //   username: username.value,
      //   password: password.value,
      //   confirmPassword: confirmPassword.value,
      //   phone: phone.value,
      //   verificationCode: verificationCode.value,
      //   email: `${username.value}@ganxy03.cn`
      // });

      if (isAdminMode.value) {
        console.log('Admin Username:', adminUsername.value);
        console.log('Admin Password:', adminPassword.value);
        emit('submit', {
          username: adminUsername.value,
          password: adminPassword.value
        });
      } else {
        // ... 普通用户提交逻辑 ...
        console.log('Username:', username.value);
        console.log('Password:', password.value);
        if (isRegisterMode.value) {
          console.log('Phone:', phone.value);
          console.log('Verification Code:', verificationCode.value);
          console.log('Email:', `${username.value}@ganxy03.cn`);
        }
        emit('submit', {
          username: username.value,
          password: password.value,
          confirmPassword: confirmPassword.value,
          phone: phone.value,
          verificationCode: verificationCode.value,
          email: `${username.value}@ganxy03.cn`
        });
      }
    };

    const toggleMode = () => {
      // isRegisterMode.value = !isRegisterMode.value;
      isRegisterMode.value = !isRegisterMode.value;
      isAdminMode.value = false; // 确保切换到普通用户模式时关闭管理员模式
    };

    const backToUserLogin = () => {
      isAdminMode.value = false;
    };
    const adminLogin = () => {
      isAdminMode.value = true;
      isRegisterMode.value = false;
    };

    const scanLogin = () => {
      showQRCode.value = !showQRCode.value;

      // // loginMode.value.style.width = '60%'

      // if (loginMode.value) {
      //   loginMode.value.classList.add('login-mode');
      //   const currentWidth = loginMode.value.style.width;
      //   loginMode.value.style.width = currentWidth === '60%' ? '100%' : '60%';
      //   showQRCode.value = !showQRCode.value;
      //   isRegisterMode.value = false;
      // }

      // // console.log(loginMode.value)
      if (loginMode.value) {
        loginMode.value.classList.add('login-mode');
        const currentWidth = loginMode.value.style.width;
        loginMode.value.style.width = currentWidth === '65%' ? '100%' : '65%';

        // 添加 transitionend 事件监听器，在动画完成后执行
        function onTransitionEnd() {
          // 确保只移除一次事件监听器

          qrCodePic.value.removeEventListener('animationend', onTransitionEnd);

          showQRCode.value = false;
          isRegisterMode.value = false;

          adjustLoginModeWidth();

          // loginMode.value.removeEventListener('transitionend', onTransitionEnd);

          // // 执行元素显隐状态切换
          // showQRCode.value = !showQRCode.value;
          // isRegisterMode.value = false;
        }

        qrCodePic.value.addEventListener('animationend', onTransitionEnd);

        // 监听 transitionend 事件以确保宽度变化完成后才切换显隐状态
        loginMode.value.addEventListener('transitionend', onTransitionEnd);


        // qrCodePic.value
        // 如果你希望有一个最小的延迟时间，可以在这里设置一个 setTimeout，
        // 并确保它足够长以覆盖最慢的过渡时间。
        // setTimeout(onTransitionEnd, 500); // 例如，如果过渡时间为0.5秒
      }

      function adjustLoginModeWidth() {
        loginMode.value.classList.add('login-mode');
        const currentWidth = loginMode.value.style.width;
        loginMode.value.style.width = currentWidth === '65%' ? '100%' : '65%';

        // 监听 transitionend 事件以确保宽度变化完成后才切换显隐状态
        function onTransitionEnd() {
          loginMode.value.removeEventListener('transitionend', onTransitionEnd);
        }

        loginMode.value.addEventListener('transitionend', onTransitionEnd);
      }

    };

    const closeQRCode = () => {
      showQRCode.value = false;
      if (loginMode.value) {
        loginMode.value.style.width = '100%'
      }
    };
    const handleForgetPassword = () => {
      console.log('点击了忘记密码');
    };

    const sendVerificationCode = () => {
      if (!sendingCode.value) {
        sendingCode.value = true;
        let timer = setInterval(() => {
          countdown.value--;
          if (countdown.value <= 0) {
            clearInterval(timer);
            sendingCode.value = false;
            countdown.value = 120;
          }
        }, 1000);
      }
    };

    // 加载动画




    return {
      username,
      password,
      confirmPassword,
      email,
      isRegisterMode,
      rememberMe,
      phone,
      verificationCode,
      sendingCode,
      countdown,
      handleSubmit,
      toggleMode,
      handleForgetPassword,
      sendVerificationCode,

      isAdminMode,
      adminUsername,
      adminPassword,
      showQRCode,
      backToUserLogin,
      adminLogin,
      scanLogin,
      closeQRCode,

      // ref dom元素
      loginMode,
      qrCodePic
    };
  }
};
</script>

<style scoped>
.loginRegister {
  position: relative;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.form-container {
  transition: width 0.5s linear;
  background: rgba(255, 255, 255, 0.2);
  /* background: url('../assets/images/background/pexels-ifreestock-619419.jpg') 50% no-repeat; */
  background-size: cover;
  backdrop-filter: blur(2px);
  -webkit-backdrop-filter: blur(2px);
  padding: 20px 48px;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  width: 480px;
  min-height: 320px;
  text-align: center;
  transition: transform 0.3s ease, opacity 0.3s ease;
  overflow: auto;
  border: none;

  animation-fill-mode: both;

  position: relative;
  z-index: 0;
}

.form-container::before {
  background: url('../../assets/images/background/pexels-ifreestock-619419.jpg') 50% no-repeat;
  background-size: cover;
  content: '';
  position: absolute;
  left: 0; right: 0; top: 0; bottom: 0;
  z-index: -1;
  opacity: .5;
}

.animate__animated {
  animation-duration: 0.5s;
  animation-fill-mode: both;
}

.animate__fadeInUp {
  animation-name: fadeInUp;
}
.animate__fadeOutDown {
  animation-name: fadeOutDown;
}
.form-container h2 {
  font-size: 2em;
  font-weight: 700;
  margin-bottom: 12px;
  color: aliceblue;
}
.mode-toggle {
  position: absolute;
  top: 10px;
  right: 10px;
  color: #409eff;
  cursor: pointer;
  font-size: 14px;
}

.mode-toggle:hover {
  color: #66b1ff;
}

/* 确保切换模式按钮可见 */
.mode-toggle.el-button--text {
  padding: 0;
}

/* 加亮复选框标签颜色 */
.checkbox-label .el-checkbox__label {
  color: #303133 !important;
}

.options .el-checkbox {
  margin-left: 0;
}

.additional-options {
  margin-top: 15px;
}

.additional-option-btn {
  color: #409eff;
  font-size: 14px;
}

.additional-option-btn:hover {
  color: #66b1ff;
}

.forget-password-link {
  color: #409eff;
  font-size: 14px;
}

.forget-password-link:hover {
  color: #66b1ff;
}

/* 验证码输入框和按钮占满一行 */
.code-input-full {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.code-input-full .el-input {
  width: calc(60% - 5px); /* 调整宽度以适应按钮 */
}

.code-send-btn {
  /* width: 38%; */
  /* width: 100%; */
  padding: 10px;
  font-size: 14px;
  color: white;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.code-send-btn:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

/* 动画过渡效果 */
.register-mode {
  animation: fadeInRight 0.5s forwards;
}

.login-mode {
  animation: fadeInLeft 0.5s forwards;
  transition: width 1s ease;
}



@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
@keyframes fadeOutDown {
  from {
    opacity: 1;
    transform: translateY(0);
  }
  to {
    opacity: 0;
    transform: translateY(20px);
  }
}



/* 自定义 */
.el-button.is-text, .el-checkbox {
  color: #409eff;
}

.el-col a {
  text-decoration: none;
}

.qr-code-container {
  width: 40%;
  font-size: 11px;
  color: #eee;
  text-align: center;
  margin: 0 0 0 12px;
}

/* 添加这些样式 */
.qr-placeholder {
  width: 128px;
  margin-left: 20px;
  /*background: white;*/
  /*padding: 12px;*/
  border-radius: 8px;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
}

.qr-mock {
  position: relative;
  width: 96px;
  height: 96px;
  background: #fff;
  border: 2px solid #ddd;
  left: calc((128px - 96px) / 2);
}

.qr-pattern {
  position: absolute;
  width: 100%;
  height: 100%;
  background:
      linear-gradient(90deg, #000 10%, transparent 10%, transparent 90%, #000 90%),
      linear-gradient(0deg, #000 10%, transparent 10%, transparent 90%, #000 90%),
      repeating-linear-gradient(90deg,
      #000 0%, #000 5%,
      transparent 5%, transparent 10%,
      #000 10%, #000 15%,
      transparent 15%, transparent 20%),
      repeating-linear-gradient(0deg,
      #000 0%, #000 5%,
      transparent 5%, transparent 10%,
      #000 10%, #000 15%,
      transparent 15%, transparent 20%);
  background-size: 100% 100%, 100% 100%, 20% 20%, 20% 20%;
  animation: qr-flicker 1s infinite alternate;
}

@keyframes qr-flicker {
  0% { opacity: 0.9; }
  100% { opacity: 1; }
}

.slide-fade-enter-active {
  transition: all 0.3s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.3s cubic-bezier(1, 0.5, 0.8, 1);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(20px);
  opacity: 0;
}

.qr-placeholder p {
  margin: 3px 0;
  font-size: 12px;
  color: #666;
}

/* 新增管理员模式动画 */
.admin-enter-active {
  animation: fadeInRight 0.5s;
}

@media (max-width: 768px) {
  .form-container {
    padding: 16px 8px;
  }
}
</style>