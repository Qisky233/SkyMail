<template>
  <div class="sky-container">
    <!-- 搜索栏 -->
    <div class="search-bar">
      <el-input
        v-model="searchKeyword"
        placeholder="搜索邮件主题或内容"
        prefix-icon="el-icon-search"
        clearable
        @input="handleSearch"
        class="search-input"
      >
        <template #prepend>
          <el-select v-model="searchType" placeholder="搜索类型" style="width: 110px">
            <el-option label="全部" value="all" />
            <el-option label="主题" value="subject" />
            <el-option label="内容" value="body" />
            <el-option label="垃圾邮件" value="spam" />
          </el-select>
        </template>
      </el-input>
    </div>

    <!-- 操作栏 -->
    <div class="action-bar">
      <div class="left-actions">
        <el-button type="primary" @click="batchDownload" icon="el-icon-download">批量导出</el-button>
        <el-button @click="refreshData" icon="el-icon-refresh">刷新数据</el-button>
      </div>
      <div class="right-actions">
        <el-tag type="info">共 {{ filteredCount }} 封邮件</el-tag>
        <el-tag :type="spamCount > 0 ? 'danger' : 'success'">
          垃圾邮件: {{ spamCount }} ({{ spamPercentage }}%)
        </el-tag>
      </div>
    </div>

    <!-- 邮件表格 -->
    <div class="mail-table">
      <el-table
        :data="paginatedData"
        stripe
        style="width: 100%"
        v-loading="isLoading"
        @selection-change="handleSelectionChange"
      >
        <el-table-column type="selection" width="45" />
        <el-table-column prop="date" label="日期" width="150" sortable>
          <template #default="{row}">
            {{ formatDate(row.date) }}
          </template>
        </el-table-column>
        <el-table-column prop="subject" label="主题" min-width="200">
          <template #default="{row}">
            <div class="subject-cell">
              <el-icon v-if="row.is_spam" color="#F56C6C" class="spam-icon">
                <Warning />
              </el-icon>
              <span :class="{'spam-text': row.is_spam}">{{ row.subject || '(无主题)' }}</span>
            </div>
          </template>
        </el-table-column>
        <el-table-column prop="from" label="发件人" width="180">
          <template #default="{row}">
            <el-tooltip :content="row.from" placement="top">
              <span class="email-address">{{ row.from }}</span>
            </el-tooltip>
          </template>
        </el-table-column>
        <el-table-column prop="spam_probability" label="垃圾邮件概率" width="150" sortable>
          <template #default="{row}">
            <el-progress 
              :percentage="row.spam_probability * 100" 
              :status="getProbabilityStatus(row.spam_probability)"
              :show-text="false"
            />
            <span :class="{'danger-text': row.spam_probability > 0.7}">
              {{ (row.spam_probability * 100).toFixed(1) }}%
            </span>
          </template>
        </el-table-column>
        <el-table-column label="操作" width="120">
          <template #default="{row}">
            <el-button type="text" @click="showDetail(row)">详情</el-button>
            <el-button 
              type="text" 
              :icon="row.is_spam ? 'el-icon-circle-check' : 'el-icon-warning'" 
              :class="row.is_spam ? 'success-text' : 'warning-text'"
              @click="toggleSpamStatus(row)"
            >
              {{ row.is_spam ? '非垃圾' : '标记' }}
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>

    <!-- 分页 -->
    <div class="pagination-wrapper">
      <el-pagination
        :current-page="currentPage"
        :page-sizes="[5, 10, 20]"
        :page-size="pageSize"
        layout="prev, pager, next, total, sizes"
        :total="totalEmails"
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
      />
    </div>

    <!-- 邮件详情弹窗 -->
    <el-dialog
      v-model="dialogVisible"
      :title="selectedEmail.is_spam ? '[垃圾邮件] ' + selectedEmail.subject : selectedEmail.subject"
      :width="dialogWidth"
      custom-class="mail-detail-dialog"
      top="5vh"
    >
      <div class="detail-content">
        <div class="meta-info">
          <el-row :gutter="20">
            <el-col :span="12">
              <el-descriptions :column="1" border>
                <el-descriptions-item label="发件人">
                  <el-tag size="small" :type="selectedEmail.label === 'spam' ? 'danger' : ''">
                    {{ selectedEmail.from || '未知' }}
                  </el-tag>
                </el-descriptions-item>
                <el-descriptions-item label="收件人">
                  <el-tag size="small" type="success">{{ selectedEmail.to || '未知' }}</el-tag>
                </el-descriptions-item>
              </el-descriptions>
            </el-col>
            <el-col :span="12">
              <el-descriptions :column="1" border>
                <el-descriptions-item label="日期">
                  {{ formatFullDate(selectedEmail.date || new Date()) }}
                </el-descriptions-item>
                <el-descriptions-item label="垃圾邮件概率">
                  <el-progress 
                    :percentage="selectedEmail.spam_probability ? selectedEmail.spam_probability * 100 : 0" 
                    :status="getProbabilityStatus(selectedEmail.spam_probability || 0)"
                    :stroke-width="18"
                    :text-inside="true"
                  />
                </el-descriptions-item>
              </el-descriptions>
            </el-col>
          </el-row>
        </div>
        <el-divider content-position="left">邮件内容</el-divider>
        <div class="email-body">
          <el-scrollbar>
            <pre :class="{'spam-content': selectedEmail.label === 'spam'}">{{ selectedEmail.content || '无内容' }}</pre>
          </el-scrollbar>
        </div>
        <div v-if="selectedEmail.attachments?.length" class="attachments">
          <el-divider content-position="left">附件</el-divider>
          <div class="attachment-list">
            <el-tag
              v-for="(file, index) in selectedEmail.attachments"
              :key="index"
              type="info"
              class="attachment-tag"
              @click="downloadAttachment(file)"
            >
              <el-icon><Document /></el-icon>
              {{ file.name }} ({{ formatFileSize(file.size) }})
            </el-tag>
          </div>
        </div>
      </div>
      <template #footer>
        <el-button @click="dialogVisible = false">关闭</el-button>
        <el-button 
          type="primary" 
          @click="handleReply"
          :disabled="selectedEmail.is_spam"
        >
          回复邮件
        </el-button>
        <el-button 
          :type="selectedEmail.is_spam ? 'success' : 'danger'" 
          @click="toggleSpamStatus(selectedEmail)"
        >
          {{ selectedEmail.is_spam ? '标记为非垃圾' : '标记为垃圾' }}
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, watch } from 'vue'
import { Warning, Document } from '@element-plus/icons-vue'
import { ElMessage, ElMessageBox } from 'element-plus'

// 响应式数据
const emails = ref([])
const searchKeyword = ref('')
const searchType = ref('all')
const currentPage = ref(1)
const pageSize = ref(10)
const dialogVisible = ref(false)
const selectedEmail = ref({})
const selectedRows = ref([])
const isLoading = ref(false)

// 监听 emails 的变化
watch(emails, () => {
  // 重新计算分页数据
  const start = (currentPage.value - 1) * pageSize.value
  paginatedData.value = filteredEmails.value.slice(start, start + pageSize.value)
})


// 计算属性
const filteredEmails = computed(() => {
  const keyword = searchKeyword.value.toLowerCase()
  if (!keyword && searchType.value === 'all') return emails.value

  return emails.value.filter(email => {
    const isSpamMatch = searchType.value === 'spam' ? email.is_spam : true
    if (!isSpamMatch) return false

    if (!keyword) return true

    switch (searchType.value) {
      case 'subject':
        return email.subject?.toLowerCase().includes(keyword)
      case 'body':
        return email.body?.toLowerCase().includes(keyword)
      default:
        return (
          email.subject?.toLowerCase().includes(keyword) ||
          email.body?.toLowerCase().includes(keyword) ||
          email.from?.toLowerCase().includes(keyword)
        )
    }
  })
})

const filteredCount = computed(() => filteredEmails.value.length)
const spamCount = computed(() => emails.value.filter(e => e.is_spam).length)
const spamPercentage = computed(() => (spamCount.value / emails.value.length * 100).toFixed(1))
const paginatedData = computed(() => {
  const start = (currentPage.value - 1) * pageSize.value
  return filteredEmails.value.slice(start, start + pageSize.value)
})
const dialogWidth = computed(() => window.innerWidth > 1200 ? '60%' : '90%')

// 方法
const totalEmails = ref(0)

const fetchEmails = async () => {
  isLoading.value = true
  try {
    const response = await fetch(`/api/v1/data?page=${currentPage.value}&limit=${pageSize.value}`)
    const data = await response.json()
    currentPage.value = data.page
    pageSize.value = data.limit
    emails.value = [...data.results] // 确保数据是响应式的
    totalEmails.value = data.total || 0

    // 重新计算分页数据
    const start = (currentPage.value - 1) * pageSize.value
    paginatedData.value = emails.value.slice(start, start + pageSize.value)
  } catch (error) {
    console.error('获取邮件数据失败:', error)
    ElMessage.error('获取邮件数据失败')
  } finally {
    isLoading.value = false
  }
}

const handleSearch = () => {
  currentPage.value = 1
}

const handleSizeChange = (size) => {
  pageSize.value = size
  currentPage.value = 1
}

const handleCurrentChange = (page) => {
  currentPage.value = page
  fetchEmails() 
}

const showDetail = (email) => {
  selectedEmail.value = { ...email }
  dialogVisible.value = true
}

const toggleSpamStatus = async (email) => {
  try {
    const response = await fetch(`http://localhost:7010/mail/${email.id}/spam`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        is_spam: !email.is_spam
      })
    })
    
    if (response.ok) {
      email.is_spam = !email.is_spam
      ElMessage.success(`已${email.is_spam ? '标记为垃圾邮件' : '标记为非垃圾邮件'}`)
    }
  } catch (error) {
    console.error('更新垃圾邮件状态失败:', error)
    ElMessage.error('操作失败')
  }
}

const batchDownload = () => {
  if (selectedRows.value.length === 0) {
    ElMessage.warning('请至少选择一封邮件')
    return
  }
  ElMessage.info(`准备导出 ${selectedRows.value.length} 封邮件`)
}

const handleSelectionChange = (selection) => {
  selectedRows.value = selection
}

const refreshData = () => {
  fetchEmails()
}

const formatDate = (dateString) => {
  const date = new Date(dateString)
  return date.toLocaleDateString()
}

const formatFullDate = (dateString) => {
  const date = new Date(dateString)
  return date.toLocaleString()
}

const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

const getProbabilityStatus = (probability) => {
  if (probability > 0.7) return 'exception'
  if (probability > 0.4) return 'warning'
  return 'success'
}

const downloadAttachment = (file) => {
  ElMessage.info(`开始下载: ${file.name}`)
  // 实际下载逻辑需要根据后端API实现
}

const handleReply = () => {
  // 回复邮件逻辑
  ElMessage.info('准备回复邮件...')
}

// 生命周期钩子
onMounted(() => {
  fetchEmails()
  window.addEventListener('resize', () => {})
})
</script>

<style scoped lang="less">
.sky-container {
  padding: 20px;
  background-color: #f5f7fa;
  min-height: 100vh;
  
  .search-bar {
    margin-bottom: 20px;
    
    .search-input {
      max-width: 600px;
    }
  }
  
  .action-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    
    .right-actions {
      display: flex;
      gap: 10px;
    }
  }
  
  .mail-table {
    background-color: white;
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
    
    .subject-cell {
      display: flex;
      align-items: center;
      
      .spam-icon {
        margin-right: 8px;
      }
      
      .spam-text {
        color: #F56C6C;
        font-weight: 500;
      }
    }
    
    .email-address {
      display: inline-block;
      max-width: 150px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .danger-text {
      color: #F56C6C;
    }
    
    .warning-text {
      color: #E6A23C;
    }
    
    .success-text {
      color: #67C23A;
    }
  }
  
  .pagination-wrapper {
    margin-top: 20px;
    display: flex;
    justify-content: center;
  }
}

:deep(.mail-detail-dialog) {
  border-radius: 8px;
  
  .detail-content {
    .detail-title {
      margin-top: 0;
      color: #333;
    }
    
    .meta-info {
      margin-bottom: 20px;
    }
    
    .email-body {
      height: 50vh;
      background-color: #f9f9f9;
      border-radius: 4px;
      padding: 15px;
      
      pre {
        margin: 0;
        white-space: pre-wrap;
        font-family: 'Courier New', monospace;
        line-height: 1.6;
      }
      
      .spam-content {
        background-color: #fff6f6;
        padding: 10px;
        border-left: 3px solid #F56C6C;
      }
    }
    
    .attachments {
      margin-top: 20px;
      
      .attachment-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }
      
      .attachment-tag {
        cursor: pointer;
        user-select: none;
        
        &:hover {
          background-color: #f0f2f5;
        }
        
        .el-icon {
          margin-right: 5px;
        }
      }
    }
  }
}

@media screen and (max-width: 768px) {
  .sky-container {
    padding: 10px;
    
    .search-bar {
      .search-input {
        width: 100%;
      }
    }
    
    .action-bar {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
      
      .right-actions {
        width: 100%;
        justify-content: space-between;
      }
    }
  }
  
  :deep(.mail-detail-dialog) {
    width: 95% !important;
    
    .el-row {
      flex-direction: column;
      
      .el-col {
        width: 100%;
        margin-bottom: 10px;
      }
    }
  }
}
</style>